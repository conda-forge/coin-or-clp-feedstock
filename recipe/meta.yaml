{% set name = "coin-or-clp" %}
{% set version = "1.17.10" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/coin-or/Clp/archive/releases/{{ version }}.tar.gz
  sha256: 0d79ece896cdaa4a3855c37f1c28e6c26285f74d45f635046ca0b6d68a509885
  patches:
    - 0001-Patch-for-downstream.patch

build:
  number: 3
  run_exports:
    - {{ pin_subpackage(name, min_pin='x.x', max_pin='x.x') }}

requirements:
  build:
    - gnuconfig  # [unix]
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}  # [unix]
    - pkg-config  # [unix]
    - make  # [unix]
    - m2-make  # [win]
    - m2-pkg-config  # [win]
    - m2-grep  # [win]
    - m2-sed  # [win]
    - m2-bash  # [win]
    - m2-base  # [win]
  host:
    - coin-or-utils
    - coin-or-osi
    - mkl-devel  # [win]
    - zlib
    - bzip2
  run_constrained:
    - coincbc * *_metapackage

test:
  commands:
    - test -f $PREFIX/lib/libClp${SHLIB_EXT}                    # [unix]
    - test -f $PREFIX/lib/libOsiClp${SHLIB_EXT}                 # [unix]
    - test -f $PREFIX/include/coin/ClpGubDynamicMatrix.hpp      # [unix]
    - test -f $PREFIX/include/coin/OsiClpSolverInterface.hpp    # [unix]
    - if not exist %LIBRARY_LIB%/libClp.lib exit 1              # [win]
    - if not exist %LIBRARY_INC%/coin/CoinSort.hpp exit 1       # [win]
    - echo ? | clp
    - strings %LIBRARY_LIB%\\libClp.lib | findstr /C:"RuntimeLibrary=MD"  # [win]
  requires:
    - binutils  # [win]

about:
  home: https://projects.coin-or.org/Clp
  dev_url: https://github.com/coin-or/Clp
  license: EPL-2.0
  license_family: OTHER
  license_file: LICENSE
  summary: COIN-OR linear programming (Clp)
  description: |
    Clp (Coin-or linear programming) is an open-source linear programming solver.
    It is primarily meant to be used as a callable library, but a basic,
    stand-alone executable version is also available. It is designed to find
    solutions of mathematical optimization problems of the form

    minimize c'x such that lhs ≤ Ax ≤ rhs and lb ≤ x ≤ ub

    CLP includes primal and dual Simplex solvers. Both dual and primal algorithms can use matrix storage methods provided by the user (0-1 and network matrices are already supported in addition to the default sparse matrix). The dual algorithm has Dantzig and Steepest edge row pivot choices; new ones may be provided by the user. The same is true for the column pivot choice of the primal algorithm. The primal can also use a non linear cost which should work for piecewise linear convex functions. CLP also includes a barrier method for solving LPs.

extra:
  recipe-maintainers:
    - wolfv
    - tkralphs
    - jschueller
